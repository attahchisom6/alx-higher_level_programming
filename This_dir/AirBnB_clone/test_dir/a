#!usr/bin/python3
"""This module will create a storage system or database capable
of storing our data. It also serves as a source to provide
information for the user
"""
from models.base_model import BaseModel
import json
import os


class FileStorage:
    """This class serializes instances to a JSON file and deserializes
    JSON file to instances:
    """

    """private attributes

    Args:
        @__file_path: string - path to the JSON file
        @__objects: empty dictionary but will store all
        objects by <class name>.id
    """
    __file_path = "file.json"
    __objects = {}

    """public methods"""
    def all(self):
        return (self.__objects)

    def new(self, obj):
        """set's in __objects the obj with key <obj class name>.id
        """
        key = "{}.{}".format(obj.__class__.__name__, obj.id)
        self.__objects[key] = obj

    def save(self):
        """serializes objects to the json file
        """
        dictt = {}
        for key, value in self.__objects.items():
            dictt[key] = value.to_dict()

        with open(self.__file_path, mode="w+", encoding="utf-8") as f:
            json.dump(dictt, f)

    def reload(self):
        """deserializes json file to the inetances of the
        dictionary, '__objects'
        """
        if os.path.exists(self.__file_path) is False:
            return

        try:
            dictt = {}
            with open(self.__file_path, mode="r", encoding="utf-8") as f:
                dictt = json.load(f)
                for key, v in dictt.items():
                    value = eval("{}(**v)".format(v['__class__']))
                    self.__objects[key] = value
        except IOError:
            pass
