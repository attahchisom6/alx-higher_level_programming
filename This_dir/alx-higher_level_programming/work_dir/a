#!/usr/bin/python3
"""Unittest for base.py file
"""
import unittest
from models.base import Base
from models.rectangle import Rectangle
from models.square import Square
import os


class Test_Base(unittest.TestCase):
    """Defines a class to evaluate diferent test cases for base.py file"""

    def test_instance_type_id_class(self):
        """Checks for a instance of the class
        """
        b1 = Base()
        self.assertIsInstance(b1, Base)
        self.assertFalse(type(b1) == type(Base))
        self.assertFalse(id(b1) == id(Base))
        b2 = Base()
        self.assertTrue(type(b1) == type(b2))
        self.assertFalse(id(b1) == id(b2))

    def test_none_id(self):
        """Checks when id is none
        """
        b1 = Base()
        self.assertEqual(b1.id, 1)
        b1 = Base()
        self.assertEqual(b1.id, 2)
        b1 = Base()
        self.assertEqual(b1.id, 3)
        b2 = Base()
        self.assertEqual(b2.id, 4)

    def test_id_value(self):
        """Checks when id has a integer value
        """
        b1 = Base(12)
        self.assertEqual(b1.id, 12)
        b1.id = 4
        self.assertEqual(b1.id, 4)
        b2 = Base(50)
        self.assertEqual(b2.id, 50)
        b1 = Base(-4)
        self.assertEqual(b1.id, -4)
        b2 = Base(0)
        self.assertEqual(b2.id, 0)
        b1 = Base(100e+1000)
        self.assertEqual(b1.id, 100e+1000)
        b1.__init__(30)
        self.assertEqual(b1.id, 30)

    def test_object_attributtes(self):
        """Check for attributes dictionary of a object"""
        b1 = Base()
        self.assertEqual(b1.__dict__, {'id': 1})
        b2 = Base()
        self.assertEqual(b2.__dict__, {'id': 2})
        b3 = Base(100)
        self.assertEqual(b3.__dict__, {'id': 100})

    def test_raise_errors(self):
        """Check for raises errors
        """
        with self.assertRaises(AttributeError):
            b1 = Base()
            print(b1.x)
        with self.assertRaises(NameError):
            b1 = Base_geometry()
        with self.assertRaises(AttributeError):
            b1.to_dictionary()

    def test_JSON_string(self):
        """Check for JSON_string method
        """
        r1 = Rectangle(10, 7, 2, 8)
        dictionary = (r1.to_dictionary())
        json_dictionary = Base.to_json_string(sorted(dictionary.items()))
        self.assertEqual(json_dictionary, '[["height", 7], ["id", 1], '
                         '["width", 10], ["x", 2], ["y", 8]]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

        r2 = Rectangle(10, 7, 2, 8, 30)
        dictionary = r2.to_dictionary()
        json_dictionary = Base.to_json_string(sorted(dictionary.items()))
        self.assertEqual(json_dictionary, '[["height", 7], ["id", 30], '
                         '["width", 10], ["x", 2], ["y", 8]]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

        r3 = Rectangle(30, 50)
        dictionary = r3.to_dictionary()
        json_dictionary = Base.to_json_string(sorted(dictionary.items()))
        self.assertEqual(json_dictionary, '[["height", 50], ["id", 2], '
                         '["width", 30], ["x", 0], ["y", 0]]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

        r4 = Rectangle(30, 50, 0, 0)
        dictionary = r4.to_dictionary()
        json_dictionary = Base.to_json_string(sorted(dictionary.items()))
        self.assertEqual(json_dictionary, '[["height", 50], ["id", 3], '
                         '["width", 30], ["x", 0], ["y", 0]]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

        r5 = Rectangle(30, 50, 0, 0, 89)
        dictionary = r5.to_dictionary()
        json_dictionary = Base.to_json_string(sorted(dictionary.items()))
        self.assertEqual(json_dictionary, '[["height", 50], ["id", 89], '
                         '["width", 30], ["x", 0], ["y", 0]]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

        dictionary = None
        json_dictionary = Base.to_json_string(dictionary)
        self.assertEqual(json_dictionary, '[]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

        dictionary = []
        json_dictionary = Base.to_json_string(dictionary)
        self.assertEqual(json_dictionary, '[]')
        self.assertTrue(type(dictionary) != type(json_dictionary))

    def test_save_to_file(self):
        """Checks save_to_file
        """
        r1 = Rectangle(10, 7, 2, 8)
        r2 = Rectangle(2, 4)
        Rectangle.save_to_file([r1, r2])
        with open("Rectangle.json", "r") as file:
            sum_read = sum(list(map(lambda x: ord(x), file.read())))
            sum_expected = sum(list(map(lambda x: ord(x), '[{"y": 8, "x": 2, '
                                        '"id": 1, "width": 10, "height": 7}, '
                                        '{"y": 0, "x": 0, "id": 2, '
                                        '"width": 2, "height": 4}]')))
            self.assertEqual(sum_read, sum_expected)

        r1 = Rectangle(10, 7)
        r2 = Rectangle(2, 4)
        Rectangle.save_to_file([r1, r2])
        with open("Rectangle.json", "r") as file:
            sum_read = sum(list(map(lambda x: ord(x), file.read())))
            sum_expected = sum(list(map(lambda x: ord(x), '[{"y": 0, "x": 0, '
                                        '"id": 3, "width": 10, "height": 7}, '
                                        '{"y": 0, "x": 0, "id": 4, '
                                        '"width": 2, "height": 4}]')))
            self.assertEqual(sum_read, sum_expected)

        """Rectangle.save_to_file(None)
        with open("Rectangle.json", "r") as file:
            self.assertEqual(file.read(), '[]')"""

    def tearDown(self):
        Base._Base__nb_objects = 0
